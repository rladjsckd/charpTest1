07/19
SELECT * FROM DEPT;
SELECT * FROM EMP;
SELECT * FROM EMP, DEPT;
SELECT COUNT(*) FROM EMP, DEPT;

SELECT * FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
ORDER BY EMPNO;


SELECT E.EMPNO, E.ENAME, D.DEPTNO, LOC FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

#급여가 2000초과인 사원들의 부서정보, 사원정보를 출력해 보세요.
SELECT E.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, SAL 
FROM EMP E, DEPT D
WHERE D.DEPTNO = E.DEPTNO AND SAL> 2000;

#239 - 2
SELECT E.DEPTNO, D.DNAME, TRUNC(AVG(SAL),0) AVG_SAL, MAX(SAL) MAX_SAL, MIN(SAL) MIN_SAL, COUNT(*) CNT
FROM EMP E, DEPT D
WHERE D.DEPTNO = E.DEPTNO
GROUP BY E.DEPTNO, D.DNAME;

CREATE TABLE cities (
  city_id INT PRIMARY KEY,
  city_name VARCHAR2(255),
  country_id INT,
  population INT
);

INSERT INTO cities VALUES (1, 'Shanghai', 1, 24256800);
INSERT INTO cities VALUES (2, 'Beijing', 1, 21516000);
INSERT INTO cities VALUES (3, 'Delhi', 2, 30291000);
INSERT INTO cities VALUES (4, 'Mumbai', 2, 20411274);
INSERT INTO cities VALUES (5, 'New York City', 3, 8623000);
INSERT INTO cities VALUES (6, 'Los Angeles', 3, 3995000);
INSERT INTO cities VALUES (7, 'Jakarta', 4, 10500000);
INSERT INTO cities VALUES (8, 'Surabaya', 4, 2750000);
INSERT INTO cities VALUES (9, 'Karachi', 5, 15741000);
INSERT INTO cities VALUES (10, 'Lahore', 5, 11126000);
INSERT INTO cities VALUES (11, 'São Paulo', 6, 12325232);
INSERT INTO cities VALUES (12, 'Rio de Janeiro', 6, 6476631);
INSERT INTO cities VALUES (13, 'Lagos', 7, 21000000);
INSERT INTO cities VALUES (14, 'Kano', 7, 3242000);
INSERT INTO cities VALUES (15, 'Dhaka', 8, 8906000);
INSERT INTO cities VALUES (16, 'Chittagong', 8, 3920222);
INSERT INTO cities VALUES (17, 'Moscow', 9, 12380664);
INSERT INTO cities VALUES (18, 'Saint Petersburg', 9, 5351935);
INSERT INTO cities VALUES (19, 'Mexico City', 10, 8915000);
INSERT INTO cities VALUES (20, 'Guadalajara', 10, 1495000);
INSERT INTO cities VALUES (21, 'Tokyo', 11, 9273000);
INSERT INTO cities VALUES (22, 'Yokohama', 11, 3724844);
INSERT INTO cities VALUES (23, 'Addis Ababa', 12, 3040740);
INSERT INTO cities VALUES (24, 'Dire Dawa', 12, 480000);
INSERT INTO cities VALUES (25, 'Manila', 13, 1780148);
INSERT INTO cities VALUES (26, 'Quezon City', 13, 2931410);
INSERT INTO cities VALUES (27, 'Cairo', 14, 9500000);
INSERT INTO cities VALUES (28, 'Alexandria', 14, 5115000);
INSERT INTO cities VALUES (29, 'Hanoi', 15, 7433000);
INSERT INTO cities VALUES (30, 'Ho Chi Minh City', 15, 8424000);

SELECT * FROM CITIES;

#급여 범위를 지정하는 조건식으로 조인
SELECT * FROM SALGRADE;
SELECT ENAME, SAL FROM EMP;

#비등가 JOIN
SELECT * FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

#자체 JOIN
SELECT * FROM EMP E, EMP C
WHERE E.MGR = C.EMPNO;

#8-8
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO AS MGR_EMPNO, E2. ENAME AS MGR_ENAME
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.MGR;

#외부조인 OUTTER JOIN
SELECT * FROM EMP;
SELECT COUNT(*) FROM EMP;
SELECT * FROM EMP WHERE ENAME = 'KING';

#일반적인 등가 조인
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO AS MGR_EMPNO, E2. ENAME AS MGR_ENAME
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO;

#LEFT OUTTER JOIN
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO AS MGR_EMPNO, E2. ENAME AS MGR_ENAME
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO(+);

#RIGHT OUTTER JOIN
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO AS MGR_EMPNO, E2. ENAME AS MGR_ENAME
FROM EMP E1, EMP E2
WHERE E1.MGR(+) = E2.EMPNO;

#ANSI 표준
#SQL-99
SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, DEPTNO, D.DNAME, D.LOC
FROM EMP E NATURAL JOIN DEPT D
ORDER BY DEPTNO, E.EMPNO;

#P234 JOIN ~ ON
SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, DEPTNO, D.DNAME, D.LOC
FROM EMP E JOIN DEPT D ON(E.DEPTNO = D.DEPTNO)
ORDER BY E.DEPTNO, EMPNO;

#8-14 LEFT OUTTER JOIN
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO AS MGR_EMPNO, E2. ENAME AS MGR_ENAME
FROM EMP E1 LEFT OUTER JOIN EMP E2 ON (E1.MGR = E2.EMPNO)
ORDER BY E1.EMPNO;

#8-15외부 RIGHT OUTER JOIN으로 위 쿼리를 작성해주세요
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO AS MGR_EMPNO, E2. ENAME AS MGR_ENAME
FROM EMP E1 RIGHT OUTER JOIN EMP E2 ON (E1.MGR = E2.EMPNO)
ORDER BY E1.EMPNO;

SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, SAL FROM EMP E, DEPT D
WHERE D.DEPTNO = E.DEPTNO AND SAL > 2000;
#239P 3-1
SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME JOB, SAL FROM EMP E, DEPT D
WHERE E.DEPTNO(+) = D.DEPTNO
ORDER BY D.DEPTNO, E.ENAME;
#239P 3-2
SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME JOB, SAL FROM EMP E JOIN DEPT D ON(E.DEPTNO = D.DEPTNO)
ORDER BY DEPTNO;
#240P 4
SELECT D1.DEPTNO, D.DNAME, E1.EMPNO, E1.ENAME, E1.MGR, E1.SAL,
       D2.DEPTNO AS DEPTNO_1, E2.EMPNO AS MGR_EMPNO, E2.ENAME AS MGR_ENAME
FROM EMP E1, EMP E2, DEPT D, DEPT D1, DEPT D2, SALGRADE S
WHERE E1.MGR = E2.EMPNO
AND E1.DEPTNO = D.DEPTNO
AND E1.DEPTNO = D1.DEPTNO
AND E2.DEPTNO = D2.DEPTNO
AND E1.SAL BETWEEN S.LOSAL AND S.HISAL;

SELECT D1.DEPTNO, D.DNAME, E1.EMPNO, E1.ENAME, E1.MGR, E1.SAL,
       D2.DEPTNO AS DEPTNO_1, E2.EMPNO AS MGR_EMPNO, E2.ENAME AS MGR_ENAME
FROM EMP E1
JOIN EMP E2 ON E1.MGR = E2.EMPNO
JOIN DEPT D ON E1.DEPTNO = D.DEPTNO
JOIN DEPT D1 ON E1.DEPTNO = D1.DEPTNO
JOIN DEPT D2 ON E2.DEPTNO = D2.DEPTNO
JOIN SALGRADE S ON E1.SAL BETWEEN S.LOSAL AND S.HISAL;

#SUB QUERY
#사원 이름이 'JONES'인 사원 급여 출력
SELECT SAL FROM EMP
WHERE ENAME = 'JONES';

#급여가 2975보다 높은 사원 정보 출력
SELECT * FROM EMP
WHERE SAL > 2975;

#급여가 'JONES'보다 높은 사원의 정보 출력
SELECT ENAME, SAL FROM EMP
WHERE SAL > (SELECT SAL FROM EMP WHERE ENAME = 'JONES');

#'KING'보다 급여가 많은 사람
SELECT ENAME, SAL FROM EMP
WHERE SAL > (SELECT SAL FROM EMP WHERE ENAME ='KING' );

#EMP 테이블의 사원 정보중에서 사원 이름이 
#ALLEN인 사원의 추가수당보다 많이 받는 사람
SELECT * FROM EMP
WHERE COMM > (SELECT COMM FROM EMP WHERE ENAME = 'ALLEN');

#9-4서브쿼리의 결과 값이 날짜형의 경우
#'ALLEN'보다 입사일이 빠른 직원은
SELECT * FROM EMP
WHERE HIREDATE < (SELECT HIREDATE FROM EMP WHERE ENAME = 'TURNER');
#9-5 JOIN 구문에서도 SUBQUERY가 동작할까
#평균급여보다 많이 받는 직원들의 정보는?
SELECT E.EMPNO, E.ENAME, E.JOB, E.SAL, D.DEPTNO, D.DNAME, D.LOC
FROM EMP E
JOIN DEPT D ON E.DEPTNO = D.DEPTNO
WHERE E.SAL > (SELECT AVG(SAL) FROM EMP);

#다중행 연산자
# IN 메인쿼리의 데이터가 서브쿼리의 결과 중 하나라도 일히찬 데이터가 있다면 TRUE
# ANY, SOME 메인쿼리의 조건식을 만족하는 서브쿼리의 결과가 하나 이상이면 TRUE
# ALL 메인쿼리의 조건식을 서브쿼리의 결과 모두가 만족하면 TRUE
# EXISTS 서브쿼리의 결과가 존재하면(즉, 행이 1개 이상일경우) TRUE
# 실행 결과가 여러개인 쿼리를 확인합니다.

#IN 연산자
SELECT * FROM EMP
WHERE DEPTNO IN (20, 30);

#각 부서별 최고 급여와 동일한 급여를 받는 사원정보 출력
SELECT MAX(SAL) FROM EMP GROUP BY DEPTNO;

SELECT * FROM EMP
WHERE SAL IN (SELECT MAX(SAL) FROM EMP 
              GROUP BY DEPTNO)
ORDER BY DEPTNO;

#ANY
SELECT * FROM EMP
WHERE SAL = ANY (SELECT MAX(SAL) FROM EMP 
              GROUP BY DEPTNO)
ORDER BY DEPTNO;

#SOME
SELECT * FROM EMP
WHERE SAL = SOME (SELECT MAX(SAL) FROM EMP 
              GROUP BY DEPTNO)
ORDER BY DEPTNO;           

#ANY 30번 부서 사원들의 최대 급여보다 적은 급여를 받는
#사원정보 출력하기
SELECT SAL FROM EMP
WHERE DEPTNO = 30;

SELECT * FROM EMP
WHERE SAL < ANY (SELECT SAL FROM EMP
WHERE DEPTNO = 30)
ORDER BY SAL, EMPNO;

#9-14 ALL
#30번 부서번호 인 사원들의 최소 급여보다 더 적은 급여를 받는 사원
SELECT SAL FROM EMP WHERE DEPTNO = 30;

SELECT * FROM EMP
WHERE SAL < ALL (SELECT SAL FROM EMP WHERE DEPTNO = 30);

#EXISTS 연산자
SELECT DNAME FROM DEPT WHERE DEPTNO = 10;
SELECT @ FROM EMP
WHERE EXISTS (SELECT DNAME FROM DEPT WHERE DEPTNO = 10);
#비교할 열이 여러개인 다중열 서브쿼리
SELECT DEPTNO, MAX(SAL) FROM EMP
GROUP BY DEPTNO;

SELECT * FROM EMP
WHERE (DEPTNO, SAL) IN (SELECT DEPTNO, MAX(SAL)
FROM EMP
GROUP BY DEPTNO);

#262P 1
SELECT E.JOB,E.EMPNO,E.ENAME,E.SAL,D.DEPTNO,D.DNAME 
FROM EMP E, DEPT D
WHERE D.DEPTNO=E.DEPTNO AND
E.JOB = (SELECT JOB FROM EMP WHERE ENAME='ALLEN');

SELECT E.JOB, E.EMPNO, E.ENAME, E.SAL, D.DEPTNO, D.DNAME
FROM EMP E JOIN DEPT D ON (D.DEPTNO = E.DEPTNO)
WHERE E.JOB = (SELECT JOB FROM EMP WHERE ENAME = 'ALLEN');


#262P 2
SELECT EMPNO, ENAME, DNAME, HIREDATE, LOC, SAL , GRADE 
    FROM EMP E JOIN DEPT D ON(E.DEPTNO=D.DEPTNO) 
    JOIN SALGRADE S ON(SAL BETWEEN S.LOSAL AND S.HISAL)
    WHERE SAL > (SELECT AVG(SAL) FROM EMP)
    ORDER BY SAL DESC, EMPNO DESC;


SELECT EMPNO, ENAME, DNAME, HIREDATE, LOC, SAL, GRADE
FROM EMP E JOIN DEPT D ON(D.DEPTNO = E.DEPTNO)
JOIN SALGRADE S ON (SAL BETWEEN S.LOSAL AND S.HISAL)
WHERE SAL > (SELECT AVG(SAL) FROM EMP)
ORDER BY SAL DESC, EMPNO DESC;

#DEPT 테이블이 있다. 복사해보자 --> DEPT_TEMP
CREATE TABLE DEPT_TEMP
AS SELECT * FROM DEPT;

SELECT * FROM DEPT_TEMP;
#데이터 추가
# 50번 부서'DATABASE' , 'SEOUL'
INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)
VALUES(50, 'DATABASE','SEOUL');

DESC DEPT_TEMP;

INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)
VALUES (60,'NEWYORK','BUSAN');

SELECT * FROM DEPT_TEMP;

INSERT INTO DEPT_TEMP
VALUES (70,'NETWORK2','ANDONG');

SELECT * FROM DEPT_TEMP;

#NULL 입력 가능?
INSERT INTO DEPT_TEMP (DEPTNO, LOC)
VALUES (90, 'INCHEON');

INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)
VALUES (80, 'MOBILE','');

SELECT * FROM DEPT_TEMP
ORDER BY DEPTNO;

#날짜 데이터 입력
DROP TABLE EMP_TEMP;

CREATE TABLE EMP_TEMP
AS SELECT * FROM EMP
WHERE 1 <> 1;

SELECT * FROM EMP_TEMP;

INSERT INTO EMP_TEMP
VALUES (1111, '성춘향', 'PRESIDENT',NULL,
        '2001-01-01', 5000, 1000, 10);
        
SELECT * FROM EMP_TEMP;

INSERT INTO EMP_TEMP
VALUES (1111, '성춘향', 'PRESIDENT',NULL,
        TO_DATE('07/01/2001','DD/MM/YYYY'), 5000, 1000, 10);
        
INSERT INTO EMP_TEMP
VALUES (8888, '성춘향', 'PRESIDENT',NULL,
       SYSDATE, 5000, 1000, 10);
       
SELECT * FROM EMP_TEMP;

#UPDATE
CREATE TABLE DEPT_TEMP2
AS SELECT * FROM DEPT;

SELECT * FROM DEPT_TEMP2;
COMMIT;

UPDATE DEPT_TEMP2
SET LOC = 'SEOUL'
WHERE DEPTNO = 40;

SELECT * FROM DEPT_TEMP2;

ROLLBACK;

#DELETE

SELECT * FROM DEPT_TEMP2;

DELETE FROM DEPT_TEMP2
WHERE DEPTNO = 40;

DELETE FROM DEPT_TEMP2
WHERE LOC = 'DALLAS';

ROLLBACK;
